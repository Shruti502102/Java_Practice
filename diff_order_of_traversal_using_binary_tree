class TreeNode{
    int key;
    TreeNode leftChild,rightChild;
    TreeNode(int value){
        key=value;
        leftChild=rightChild=null;
    }
}
class BinaryTree {
    TreeNode rootNode;
    void inorderTraversal(TreeNode currentNode){
        if(currentNode!=null){
            inorderTraversal(currentNode.leftChild);
            System.out.print(currentNode.key+" ");
            inorderTraversal(currentNode.rightChild);
        }
    }
    void preorderTraversal(TreeNode currentNode){
        if(currentNode!=null){
            System.out.print(currentNode.key+" ");
            preorderTraversal(currentNode.leftChild);
            preorderTraversal(currentNode.rightChild);           
        }
    }
    void postorderTraversal(TreeNode currentNode){
        if(currentNode!=null){
            postorderTraversal(currentNode.leftChild);
            postorderTraversal(currentNode.rightChild);
            System.out.print(currentNode.key+" ");
        }  
    }
    void levelorderTraversal(TreeNode root){
        if(root==null){
            return; 
            
        }
        TreeNode[] queue=new TreeNode[100];
        int front=0,rear=0;
        queue[rear++]=root;
        while(front<rear){
            TreeNode current=queue[front++];
            System.out.print(current.key+" ");
            if(current.leftChild!=null)
                queue[rear++]=current.leftChild;
            if(current.rightChild!=null)
                queue[rear++]=current.rightChild;
        }
    }
    public static void main(String args[]){
        BinaryTree tree=new BinaryTree();
        tree.rootNode=new TreeNode(1);
        tree.rootNode.leftChild=new TreeNode(2);
        tree.rootNode.rightChild=new TreeNode(3);
        tree.rootNode.leftChild.leftChild=new TreeNode(4);
        tree.rootNode.leftChild.rightChild=new TreeNode(5);
        tree.rootNode.rightChild.leftChild=new TreeNode(6);
        tree.rootNode.rightChild.rightChild=new TreeNode(7);
        tree.rootNode.rightChild.rightChild.rightChild=new TreeNode(10);
        System.out.print("Inorder Traversal: ");
        tree.inorderTraversal(tree.rootNode);
        System.out.println();
        System.out.print("Preorder Traversal: ");
        tree.preorderTraversal(tree.rootNode);
        System.out.println();
        System.out.print("Postorder Traversal: ");
        tree.postorderTraversal(tree.rootNode);
        System.out.println();
        System.out.print("Level Order Traversal: ");
        tree.levelorderTraversal(tree.rootNode);
        System.out.println();
        
    }
}
