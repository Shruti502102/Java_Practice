import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;
class Node {
    int key;
    int height;
    Node left, right;
    Node(int d) {
        key = d;
        height = 1;
    }
}
class AVLTree {
    private Node root;

    // Public insert method
    public void insert(int key) {
        root = insert(root, key);
    }

    // Public delete method
    public void delete(int key) {
        root = delete(root, key);
    }

    // Get height of a node
    int height(Node N) {
        return (N == null) ? 0 : N.height;
    }

    // Max of two integers
    int max(int a, int b) {
        return (a > b) ? a : b;
    }
    // Right rotate
    Node rightrotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        return x;
    }

    // Left rotate
    Node leftrotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        return y;
    }
    // Get balance factor
    int getbalance(Node N) {
        return (N == null) ? 0 : height(N.left) - height(N.right);
    }

    // Recursive insert
    Node insert(Node node, int key) {
        if (node == null)
            return new Node(key);

        if (key < node.key)
            node.left = insert(node.left, key);
        else if (key > node.key)
            node.right = insert(node.right, key);
        else
            return node; // Duplicate keys not allowed

        node.height = 1 + max(height(node.left), height(node.right));
        int balance = getbalance(node);

        // Balancing cases
        if (balance > 1 && key < node.left.key)
            return rightrotate(node);
        if (balance < -1 && key > node.right.key)
            return leftrotate(node);
        if (balance > 1 && key > node.left.key) {
            node.left = leftrotate(node.left);
            return rightrotate(node);
        }
        if (balance < -1 && key < node.right.key) {
            node.right = rightrotate(node.right);
            return leftrotate(node);
        }

        return node;
    }
    Node minvalue(Node node) {
        Node current = node;
        while (current.left != null)
            current = current.left;
        return current;
    }

    // Recursive delete
    Node delete(Node root, int key) {
        if (root == null)
            return root;

        if (key < root.key)
            root.left = delete(root.left, key);
        else if (key > root.key)
            root.right = delete(root.right, key);
        else {
            // Node with one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children
            Node temp = minvalue(root.right);
            root.key = temp.key;
            root.right = delete(root.right, temp.key);
        }

        root.height = max(height(root.left), height(root.right)) + 1;
        int balance = getbalance(root);

        // Balancing cases
        if (balance > 1 && getbalance(root.left) >= 0)
            return rightrotate(root);
        if (balance > 1 && getbalance(root.left) < 0) {
            root.left = leftrotate(root.left);
            return rightrotate(root);
        }
        if (balance < -1 && getbalance(root.right) <= 0)
            return leftrotate(root);
        if (balance < -1 && getbalance(root.right) > 0) {
            root.right = rightrotate(root.right);
            return leftrotate(root);
        }

        return root;
    }
    public boolean search(int key) {
    return search(root, key);
    }

    private boolean search(Node node, int key) {
        if (node == null) return false;
        if (key == node.key) return true;
        return (key < node.key) ? search(node.left, key) : search(node.right, key);
    }


    // Preorder traversal (for testing)
    public void preOrder() {
        preOrder(root);
        System.out.println();
    }

    private void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }
    public void inOrder() {
        System.out.print("InOrder: ");
        inOrder(root);
        System.out.println();
    }

    private void inOrder(Node node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.key + " ");
            inOrder(node.right);
        }
    }

    public void postOrder() {
        System.out.print("PostOrder: ");
        postOrder(root);
        System.out.println();
    }

    private void postOrder(Node node) {
        if (node != null) {
            postOrder(node.left);
            postOrder(node.right);
            System.out.print(node.key + " ");
        }
    }

    public void levelOrder() {
        System.out.print("LevelOrder: ");
        if (root == null) return;

        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            Node temp = queue.poll();
            System.out.print(temp.key + " ");
            if (temp.left != null) queue.offer(temp.left);
            if (temp.right != null) queue.offer(temp.right);
        }
        System.out.println();
    }
    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
        Scanner scanner = new Scanner(System.in);

        System.out.println("AVL Tree Console Interface");
        System.out.println("---------------------------");

        while (true) {
            System.out.println("\nChoose an operation:");
            System.out.println("1. Insert");
            System.out.println("2. Delete");
            System.out.println("3. PreOrder Traversal");
            System.out.println("4. InOrder Traversal");
            System.out.println("5. PostOrder Traversal");
            System.out.println("6. LevelOrder Traversal");
            System.out.println("7. Exit");

            System.out.print("Enter your choice (1-7): ");
            int choice;

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Please enter a number between 1 and 7.");
                continue;
            }

            switch (choice) {
                case 1:
                    System.out.print("Enter key to insert: ");
                    int insertKey = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    tree.insert(insertKey);
                    System.out.println("Inserted " + insertKey);
                    break;
                case 2:
                    System.out.print("Enter key to delete: ");
                    int deleteKey = scanner.nextInt();
                    scanner.nextLine(); // consume newline
                    tree.delete(deleteKey);
                    System.out.println("Deleted " + deleteKey);
                    break;
                case 3:
                    tree.preOrder();
                    break;
                case 4:
                    tree.inOrder();
                    break;
                case 5:
                    tree.postOrder();
                    break;
                case 6:
                    tree.levelOrder();
                    break;
                case 7:
                    System.out.println("Exiting program. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
